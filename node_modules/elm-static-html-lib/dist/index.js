"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var crypto_1 = require("crypto");
var fs = require("fs");
var path = require("path");
var templates = require("./templates");
/* tslint:disable-next-line */
var compile = require("node-elm-compiler").compile;
var renderDirName = ".elm-static-html";
function makeCacheDir(dirPath) {
    // make our cache dir
    try {
        fs.mkdirSync(dirPath);
        fs.mkdirSync(path.join(dirPath, "Native"));
    }
    catch (e) {
        // ignore this and try to continue anyway
    }
}
function parseProjectName(repoName) {
    return repoName
        .replace("https://github.com/", "")
        .replace(".git", "")
        .replace("/", "$");
}
function runElmApp(viewHash, dirPath, model) {
    return new Promise(function (resolve, reject) {
        var Elm = require(path.join(dirPath, "elm.js"));
        var privateName = "PrivateMain" + viewHash;
        if (Object.keys(Elm).indexOf(privateName) === -1) {
            return reject("Code generation problem: Unable to find the module: " + privateName);
        }
        var elmApp;
        if (typeof model === "undefined") {
            elmApp = Elm[privateName].worker();
        }
        else {
            elmApp = Elm[privateName].worker(model);
        }
        elmApp.ports["htmlOut" + viewHash].subscribe(resolve);
    });
}
function wipeElmFromCache(dirPath) {
    try {
        var resolved = require.resolve(path.join(dirPath, "elm.js"));
        delete require.cache[resolved];
    }
    catch (e) {
        // ignore if we didn't have elm in the require cache
    }
}
function installPackages(dirPath, installMethod) {
    return new Promise(function (resolve, reject) {
        if (installMethod) {
            var runningProcess = child_process_1.spawn(installMethod, [], { cwd: dirPath });
            runningProcess.on("close", resolve);
        }
        else {
            resolve();
        }
    });
}
function makeHash(viewFunction) {
    return crypto_1.createHash("MD5").update(viewFunction).digest("hex");
}
function elmStaticHtml(rootDir, viewFunction, options) {
    var viewHash = makeHash(viewFunction);
    var dirPath = path.join(rootDir, renderDirName);
    if (options.alreadyRun === true) {
        return runElmApp(viewHash, dirPath, options.model);
    }
    // try to load elm-package.json
    var originalElmPackagePath = path.join(rootDir, "elm-package.json");
    var elmPackage = null;
    try {
        elmPackage = JSON.parse(fs.readFileSync(originalElmPackagePath, "utf8"));
    }
    catch (e) {
        return Promise.reject("Failed to load " + originalElmPackagePath);
    }
    makeCacheDir(dirPath);
    wipeElmFromCache(dirPath);
    var projectName = parseProjectName(elmPackage.repository);
    elmPackage = fixElmPackage(rootDir, elmPackage);
    var elmPackagePath = path.join(dirPath, "elm-package.json");
    var privateMainPath = path.join(dirPath, "PrivateMain" + viewHash + ".elm");
    var nativePath = path.join(dirPath, "Native/Jsonify.js");
    fs.writeFileSync(elmPackagePath, JSON.stringify(elmPackage));
    var rendererFileContents = templates.generateRendererFile(viewHash, viewFunction, options.decoder, options.newLines, options.indent);
    fs.writeFileSync(privateMainPath, rendererFileContents);
    var nativeString = templates.generateNativeModuleString(projectName);
    fs.writeFileSync(nativePath, nativeString);
    return installPackages(dirPath, options.installMethod).then(function () {
        return runCompiler(viewHash, privateMainPath, dirPath, options.model, options.elmMakePath);
    });
}
exports.default = elmStaticHtml;
function fixElmPackage(workingDir, elmPackage) {
    elmPackage["native-modules"] = true;
    var sources = elmPackage["source-directories"].map(function (dir) {
        return path.join(workingDir, dir);
    });
    sources.push(".");
    elmPackage["source-directories"] = sources;
    elmPackage.dependencies["eeue56/elm-html-in-elm"] = "2.0.0 <= v < 3.0.0";
    return elmPackage;
}
function runCompiler(viewHash, privateMainPath, rootDir, model, elmMakePath) {
    var options = {
        cwd: rootDir,
        output: "elm.js",
        yes: true,
    };
    if (elmMakePath) {
        options.pathToMake = elmMakePath;
    }
    return new Promise(function (resolve, reject) {
        fs.readdir(rootDir, function (err, files) {
            var actualFiles = files.filter(function (name) { return name.indexOf("PrivateMain") === 0; });
            var compileProcess = compile(actualFiles, options);
            compileProcess.on("exit", function (exitCode) {
                if (exitCode !== 0) {
                    return reject(exitCode);
                }
                return runElmApp(viewHash, rootDir, model).then(resolve);
            });
        });
    });
}
